--------------------------------------------------------------------------------
-- Type gathering
--
-- This file is responsible for creating and maintaining the type environment.
-- This includes the types of the fields of all classes, and the types of the
-- local declarations made in statements.
--------------------------------------------------------------------------------

{
type TypeEnvironment = M.Map Scope Type'
}

--------------------------------------------------------------------------------
-- Gathering of the fields and their corresponding type.
--------------------------------------------------------------------------------

attr    TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl'
    syn fieldTypes use {M.union} {M.empty} :: {TypeEnvironment}

sem MemberDecl'
    | FieldDecl' lhs.fieldTypes = generateTypesFromDecls Nothing @lhs.className @ty.self @var.self

--------------------------------------------------------------------------------
-- Gathering of the local variables and their corresponding type.
--------------------------------------------------------------------------------

attr    TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl' CompoundStmts' 
        CompoundStmt' Stmt' SwitchBlocks' SwitchBlock' MaybeExp' Exps' Exp' 
        MethodInvocation' FieldAccess' VarInits' VarInit' MaybeVarInits' ArrayIndex' 
        VarDecls' VarDecl' Lhs' Catches' Catch' MaybeCompoundStmts' ElementValue'
        AnnotationKeyValues' AnnotationKeyValue' Annotation' FormalParams' FormalParam'
        Modifiers' Modifier'
    inh types :: {TypeEnvironment}

sem CompilationUnit'
    | CompilationUnit' decls.types = @decls.fieldTypes

sem MemberDecl'
    | MethodDecl'       body.types = @lhs.types `M.union` generateTypesFromParams Nothing @lhs.className @params.self
    | ConstructorDecl'  body.types = @lhs.types `M.union` generateTypesFromParams Nothing @lhs.className @params.self

sem CompoundStmts'
    | Cons  tl.types = @lhs.types `M.union` generateTypesFromStmt Nothing @lhs.className @hd.self

--------------------------------------------------------------------------------
-- Auxiliary functions on the type environment.
--------------------------------------------------------------------------------

{
generateTypesFromDecls :: Maybe Name' -> String -> Type' -> VarDecls' -> TypeEnvironment
generateTypesFromDecls package className ty
    = foldr (\ (VarDecl' (VarId' name) _) -> (M.singleton (Scope package className name) ty `M.union`)) M.empty 

generateTypesFromParams :: Maybe Name' -> String -> FormalParams' -> TypeEnvironment
generateTypesFromParams package className
    = foldr (\ (FormalParam' _ ty (VarId' name)) -> (M.singleton (Scope package className name) ty `M.union`)) M.empty

generateTypesFromStmt :: Maybe Name' -> String -> CompoundStmt' -> TypeEnvironment
generateTypesFromStmt package className (Stmt' (Decl' _ ty vars)) 
    = generateTypesFromDecls package className ty vars
generateTypesFromStmt _ _ _
        = M.empty

getResultClassNameOfInvocation :: CompilationUnit' -> Maybe Name' -> String -> TypeEnvironment -> Exp' -> Maybe String
getResultClassNameOfInvocation unit package className types (MethodInv' (MethodCall' name args)) = do
    scope         <- getScopeOfInvocation unit package (Just className) types name
    method        <- getMethod unit scope
    nonVoidTy     <- getReturnTypeOfMethod method
    (RefType' ty) <- nonVoidTy
    let [resultName] = nameOfRefType ty
    return resultName

getScopeOfCreation :: CompilationUnit' -> Maybe Name' -> String -> TypeEnvironment -> Exp' -> Maybe Scope
getScopeOfCreation unit package _ _ (InstanceCreation' (ClassType' [name]) args)
    | Just _ <- findClass name unit
        = Just $ Scope package name name
    | otherwise
        = Nothing

getScopeOfInvocation :: CompilationUnit' -> Maybe Name' -> Maybe String -> TypeEnvironment -> Name' -> Maybe Scope
getScopeOfInvocation unit package className types [name]
    | Just className' <- className
    , Just classDecl  <- findClass className' unit
    , Just _          <- findMethod name classDecl
        = Just (Scope package className' name)
        
    | otherwise    
        = Nothing

getScopeOfInvocation ast package className types (name:names)
    | Just _ <- findClass name ast 
        = getScopeOfInvocation ast package (Just name) types names
    | Just className' <- className
        = case types M.!? Scope package className' name of
            Just ty' ->
                getScopeOfInvocation ast package (Just $ getNameOfType ty') types names
            Nothing  -> 
                Nothing
    | otherwise
        = Nothing

getNameOfType :: Type' -> String
getNameOfType (RefType' (ClassRefType' (ClassType' [name]))) = name
}