data CompoundStmt'
    | Seq'          stat1   :: CompoundStmt'
                    stat2   :: CompoundStmt'

    | Block'        stat    :: CompoundStmt'

    | IfThenElse'   exp     :: Exp
                    stat1   :: CompoundStmt'
                    stat2   :: CompoundStmt'

    | While'        ident   :: {Maybe Ident}
                    exp     :: Exp
                    body    :: CompoundStmt'
                    
    | Stmt'         stat    :: Stmt'
deriving CompoundStmt' : Eq, Show

data Stmt'
    | VarDecl'      modifiers :: {[Modifier]}
                    ty        :: {Type}
                    vars      :: {[VarDecl]}

    | Empty'

    | ExpStmt'      exp       :: Exp

    | Assert'       exp       :: Exp
                    error     :: {Maybe Exp}

    | Assume'       exp       :: Exp
                    error     :: {Maybe Exp}

    | Break'        ident     :: {Maybe Ident}

    | Continue'     ident     :: {Maybe Ident}

    | Return'       exp       :: {Maybe Exp}
deriving Stmt' : Eq, Show

data Exp'
    | LitInt'       value   :: {Integer}
    | LitFloat'     value   :: {Double}
    | LitDouble'    value   :: {Double}
    | LitBool'      value   :: {Bool}
    | LitNull'

    | PreNot'       exp     :: Exp'

    | BinOp'        exp1    :: Exp'
                    op      :: {Op}
                    exp2    :: Exp'
        
deriving Exp' : Eq, Show