data Block'
    | Block'    blocks :: BlockStmts'
deriving Block' : Eq, Show

-- type BlockStmts' = [BlockStmt']

data BlockStmts'
    | Seq'      s1 :: BlockStmts'
                s2 :: BlockStmts'

    | Stmt'     s  :: BlockStmt' 
deriving BlockStmts' : Eq, Show

data BlockStmt'
    | BlockStmt'    stat :: Stmt'

    -- | LocalClass 

    | LocalVars'    modifiers :: {[Modifier]}
                    ty        :: {Type}
                    vars      :: VarDecls'
deriving BlockStmt' : Eq, Show

type VarDecls' = [VarDecl']

data VarDecl'
    | VarDecl' name :: {VarDeclId}
               init :: {(Maybe VarInit')}
deriving VarDecl' : Eq, Show

type VarInits' = [VarInit']

data VarInit'
    | InitExp'      exp :: Exp

    | InitArray'    init :: ArrayInit'
deriving VarInit' : Eq, Show

data ArrayInit'
    | ArrayInit'    inits :: VarInits'
deriving ArrayInit' : Eq, Show

data Stmt'
    | StmtBlock'    block  :: Block' 

    | IfThen'       exp    :: Exp
                    stat   :: Stmt'

    | IfThenElse'   exp    :: Exp
                    stat1  :: Stmt'
                    stat2  :: Stmt'

    | While'        exp    :: Exp
                    body   :: Stmt' 

    | BasicFor'     init   :: {Maybe ForInit}
                    guard  :: {Maybe Exp}
                    update :: {Maybe [Exp]}
                    body   :: Stmt'
    -- | EnhancedFor

    | Empty'

    | ExpStmt'      exp    :: Exp

    | Assert'       exp    :: Exp
                    error  :: {Maybe Exp}

    -- | Switch
    -- | Do
    | Break'        ident  :: {Maybe Ident}
    | Continue'     ident  :: {Maybe Ident}

    | Return'       exp :: {Maybe Exp}
    
    -- | Synchronized
    -- | Throw
    -- | Try
    -- | Labeled
deriving Stmt' : Eq, Show

{-data Exp'
    | Lit'          value :: {Literal}

    -- | ClassLit
    -- | This
    -- | ThisClass
    -- | InstanceCreation
    -- | QualInstanceCreation
    -- | ArrayCreate
    -- | ArrayCreateInit
    -- | FieldAcces
    -- | MethodInv
    -- | ArrayAccess

    | ExpName       name :: {Name}

    | PostIncrement exp :: Exp'

    | PostDecrement exp :: Exp'

    | PreIncrement  exp :: Exp'

    | PreDecrement  exp :: Exp'

    -- | PrePlus
    -- | PreMinus
    -- | PreBitCompl
    -- | PreNot
    -- | Cast
    | BinOp
    -- | InstanceOf
    -- | Cond
    -- | Assign
    -- | Lambda
    -- | MethodRef
-}

{
transformBlock :: Block -> Block'
transformBlock (Block [])     = Block' $ Stmt' $ BlockStmt' $ Empty'
transformBlock (Block (s:[])) = Block' $ Stmt' s
transformBlock (Block ss)     = Block' $ foldr1 (\ s1 s2 -> Seq (transformBlockStmt s1) (transformBlockStmt s2)) ss

transformBlockStmt :: BlockStmt -> BlockStmt'
transformBlockStmt (BlockStmt s)        = BlockStmt' $ transformStmt s
transformBlockStmt (LocalVars ms ty vs) = LocalVars' ms ty (map transformVarDecl vs)

transformVarDecl :: VarDecl -> VarDecl'
transformVarDecl (VarDecl name (Just init)) = VarDecl' name $ Just (transformVarInit init)
transformVarDecl (VarDecl name Nothing)     = VarDecl' name Nothing

transformVarInit :: VarInit -> VarInit'
transformVarInit (InitExp e)      = InitExp' e
transformVarInit (InitArray init) = InitArray' $ transformArrayInit init

transformArrayInit :: ArrayInit -> ArrayInit'
transformArrayInit (ArrayInit inits) = ArrayInit' $ map transformVarInit inits

transformStmt :: Stmt -> Stmt'
transformStmt (StmtBlock (Block [])) = Empty'
transformStmt (StmtBlock b)          = StmtBlock' $ transformBlock b
transformStmt (IfThen e s)           = IfThen' e $ transformStmt s 
transformStmt (IfThenElse e s1 s2)   = IfThenElse' e (transformStmt s1) (transformStmt s2) 
transformStmt (While e b)            = While' e $ transformStmt b
transformStmt (BasicFor i g u b)     = BasicFor' i g u $ transformStmt b
transformStmt Empty                  = Empty'
transformStmt (ExpStmt e)            = ExpStmt' e
transformStmt (Assert e error)       = Assert' e error
transformStmt (Break i)              = Break' i
transformStmt (Continue i)           = Continue' i
transformStmt (Return e)             = Return' e 
}