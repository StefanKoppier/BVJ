data Block'
    | Block'    blocks :: BlockStmts'
deriving Block' : Eq, Show

data BlockStmts'
    | Seq'      stat1 :: BlockStmt'
                stat2 :: BlockStmts'

    | Single'   s     :: BlockStmt' 
deriving BlockStmts' : Eq, Show

data BlockStmt'
    | BlockStmt'    stat :: Stmt'

    -- | LocalClass 

    | LocalVars'    modifiers :: {[Modifier]}
                    ty        :: {Type}
                    vars      :: VarDecls'
deriving BlockStmt' : Eq, Show

type VarDecls' = [VarDecl']

data VarDecl'
    | VarDecl' name :: {VarDeclId}
               init :: {(Maybe VarInit')}
deriving VarDecl' : Eq, Show

type VarInits' = [VarInit']

data VarInit'
    | InitExp'      exp :: Exp

    | InitArray'    init :: ArrayInit'
deriving VarInit' : Eq, Show

data ArrayInit'
    | ArrayInit'    inits :: VarInits'
deriving ArrayInit' : Eq, Show

data Stmt'
    | StmtBlock'    block  :: Block' 

    | IfThen'       exp    :: Exp
                    stat   :: Stmt'

    | IfThenElse'   exp    :: Exp
                    stat1  :: Stmt'
                    stat2  :: Stmt'

    | While'        exp    :: Exp
                    body   :: Stmt' 

    | BasicFor'     init   :: {Maybe ForInit}
                    guard  :: {Maybe Exp}
                    update :: {Maybe [Exp]}
                    body   :: Stmt'

    -- | EnhancedFor

    | Empty'

    | ExpStmt'      exp    :: Exp

    | Assert'       exp    :: Exp
                    error  :: {Maybe Exp}

    -- | Switch
    -- | Do

    | Break'        --ident  :: {Maybe Ident}

    | Continue'     --ident  :: {Maybe Ident}

    | Return'       exp    :: {Maybe Exp}
    
    -- | Synchronized
    -- | Throw
    -- | Try
    | Labeled'      ident :: {Ident}
                    stat  :: Stmt'
deriving Stmt' : Eq, Show

{-data Exp'
    | Lit'          value :: {Literal}

    -- | ClassLit
    -- | This
    -- | ThisClass
    -- | InstanceCreation
    -- | QualInstanceCreation
    -- | ArrayCreate
    -- | ArrayCreateInit
    -- | FieldAcces
    -- | MethodInv
    -- | ArrayAccess

    | ExpName       name :: {Name}

    | PostIncrement exp :: Exp'

    | PostDecrement exp :: Exp'

    | PreIncrement  exp :: Exp'

    | PreDecrement  exp :: Exp'

    -- | PrePlus
    -- | PreMinus
    -- | PreBitCompl
    -- | PreNot
    -- | Cast
    | BinOp
    -- | InstanceOf
    -- | Cond
    -- | Assign
    -- | Lambda
    -- | MethodRef
-}

{
transformBlock :: Block -> PhaseResult Block'
transformBlock (Block ss) = Block' <$> transformBlockStmts ss

transformBlockStmts :: [BlockStmt] -> PhaseResult  BlockStmts'
transformBlockStmts []     = return $ Single' $ BlockStmt' $ Empty'
transformBlockStmts (s:[]) = Single' <$> transformBlockStmt s
transformBlockStmts (s:ss) = Seq' <$> transformBlockStmt s <*> transformBlockStmts ss

transformBlockStmt :: BlockStmt -> PhaseResult BlockStmt'
transformBlockStmt (BlockStmt s)        = BlockStmt' <$> transformStmt s
transformBlockStmt (LocalVars ms ty vs) = LocalVars' ms ty <$> (mapM transformVarDecl vs)

transformVarDecl :: VarDecl -> PhaseResult VarDecl'
transformVarDecl (VarDecl name Nothing)     = return $ VarDecl' name Nothing
transformVarDecl (VarDecl name (Just init)) = do
    init' <- transformVarInit init
    return $ VarDecl' name (Just init')

transformVarInit :: VarInit -> PhaseResult VarInit'
transformVarInit (InitExp e)      = return $ InitExp' e
transformVarInit (InitArray init) = InitArray' <$> transformArrayInit init

transformArrayInit :: ArrayInit -> PhaseResult ArrayInit'
transformArrayInit (ArrayInit inits) = ArrayInit' <$> mapM transformVarInit inits

transformStmt :: Stmt -> PhaseResult Stmt'
transformStmt (StmtBlock b)        = StmtBlock' <$> transformBlock b
transformStmt (IfThen e s)         = IfThen' e <$> transformStmt s 
transformStmt (IfThenElse e s1 s2) = IfThenElse' e <$> transformStmt s1 <*> transformStmt s2 
transformStmt (While e b)          = While' e <$> transformStmt b
transformStmt (BasicFor i g u b)   = BasicFor' i g u <$> transformStmt b
transformStmt Empty                = return Empty'
transformStmt (ExpStmt expr)       = return $ ExpStmt' expr
transformStmt (Assert expr err)    = return $ Assert' expr err
transformStmt (Break Nothing)      = return Break'
transformStmt (Continue Nothing)   = return Continue' 
transformStmt (Return e)           = return $ Return' e 
transformStmt (Labeled l s)        = Labeled' l <$> transformStmt s 
transformStmt s                    = Left $ SyntaxTransformation $  "The statment " ++ show s ++ " is not supported"
}