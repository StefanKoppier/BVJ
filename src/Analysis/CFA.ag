imports {
import qualified Data.Map                          as M
import           Analysis.CFG
import           Data.Graph.Inductive.Graph
import           Parsing.Syntax
import           Parsing.Utility
import           Analysis.CFA.Utility
import           Debug.Trace
}

include "../Parsing/Syntax.ag"

attr    TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl' MaybeCompoundStmts' 
        CompoundStmts' CompoundStmt' Stmt' SwitchBlocks' SwitchBlock' MaybeExp' Exps' Exp' 
        MethodInvocation' VarDecls' VarDecl' VarInits' VarInit' MaybeVarInits' 
        ArrayIndex' Lhs' FieldAccess' Catches' Catch'
    inh ast :: CompilationUnit'

sem CompilationUnit'
    | CompilationUnit' decls.ast = @self

attr    CompilationUnit' TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl' 
        MaybeCompoundStmts' Catches' Catch' CompoundStmts' CompoundStmt' Stmt'  
        SwitchBlocks' SwitchBlock'
    syn nodes use {++} {[]} :: {CFGNodes}
    syn edges use {++} {[]} :: {CFGEdges}
    chn label               :: {Node}

attr    TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl' CompoundStmts' 
        CompoundStmt' Stmt' SwitchBlocks' SwitchBlock' MaybeExp' Exps' Exp' 
        MethodInvocation' VarDecls' VarDecl' VarInits' VarInit' MaybeVarInits' 
        Lhs' ArrayIndex' FieldAccess'
    inh methods :: {Methods}
              
attr    Decls' Decl' MemberDecl' CompoundStmts' CompoundStmt' Stmt' MaybeExp' Exps' 
        Exp' MethodInvocation' VarDecls' VarDecl' MaybeVarInits' VarInits' VarInit' 
        Lhs' ArrayIndex' FieldAccess' SwitchBlocks' SwitchBlock'
    inh className :: {String}

attr    CompilationUnit' TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl'
    syn methods use {M.union} {M.empty} :: {Methods} 

include "CFA/Statement.ag"
include "CFA/Methods.ag"
include "CFA/Type.ag"
include "CFA/Expression.ag"

--------------------------------------------------------------------------------
-- Construction of the final control flow graph.
--------------------------------------------------------------------------------

attr    CompilationUnit'
    syn cfg :: {CFG}

sem CompilationUnit'
    | CompilationUnit' lhs.cfg = constructCFG @decls.nodes @decls.edges

{
cfgOfCompilationUnit :: CompilationUnit' -> CFG
cfgOfCompilationUnit unit
    = cfg_Syn_CompilationUnit' $ wrap_CompilationUnit' (sem_CompilationUnit' unit) initial
    where
        initial = Inh_CompilationUnit' { label_Inh_CompilationUnit' = 0 }
}