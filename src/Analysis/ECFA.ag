include "CFA.ag"

--------------------------------------------------------------------------------
-- ECFG Node construction
--------------------------------------------------------------------------------

attr CompilationUnit' TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl'
    chn ecfgLabel :: {Node}
    chn ecfg      :: {ECFG}

attr CompilationUnit' TypeDecls' TypeDecl' ClassDecl' Decls' Decl' MemberDecl' ConstructorBody'
    chn label :: {Node}

attr Decl' MemberDecl' ConstructorBody'
    syn cfg :: {CFG}

sem CompilationUnit'
    | CompilationUnit'  decls.label = @lhs.label

sem TypeDecls'
    | Cons              lhs.label = @tl.label
                        hd .label = @lhs.label
                        tl .label = @hd.label
            
sem TypeDecl'
    | ClassTypeDecl'    lhs.label = @decl.label

sem ClassDecl'
    | ClassDecl'        lhs.label = @body.label

sem Decls'
    | Cons              lhs.label = @tl.label
                           .ecfg  = @tl.ecfg
                        hd .label = @lhs.label
                        tl .label = @hd.label
                           .ecfg  = @hd.ecfg

sem Decl'
    | MemberDecl'       lhs  .cfg       = @decl.cfg
                             .label     = @decl.label
                             .ecfgLabel = new @lhs.ecfgLabel
                             .ecfg      = @decl.ecfg
                        decl.label      = @lhs.label

sem MemberDecl'
    | MethodDecl'       lhs .cfg   = @body.cfg
                            .label = @body.label 
                            .ecfg  = insNode (new @lhs.ecfgLabel, ([@name], @body.cfg)) @lhs.ecfg
                        body.label = @lhs.label
                            .cfg   = CFG empty 0

    | ConstructorDecl'  lhs.cfg    = @body.cfg
                            .label = @body.label
                            .ecfg  = insNode (new @lhs.ecfgLabel, ([@name], @body.cfg)) @lhs.ecfg
                        body.label = @lhs.label

sem ConstructorBody'
    | ConstructorBody'  lhs .cfg   = @stat.cfg
                            .label = @stat.label
                        stat.label = @lhs.label
                            .cfg   = CFG empty 0

--------------------------------------------------------------------------------
-- ECFG Edge construction
--------------------------------------------------------------------------------

--attr MemberDecl' ConstructorBody' CompoundStmt' Stmt' Expr'
--    syn invocations use (S.union) (S.empty) :: {S.Set Node}
{-
attr CompoundStmt' Stmt' Exps' Exp'
    chn ECFGNodes   :: {ECFG}

sem Stmt'
    | Return'

attr Exps' Exp'
    syn invocations  use (S.union) (S.empty) :: {S.Set Node}

sem Exps' Exp'
    | MethodInv' lhs.invocations = findNodeOfMethod @name.self @lhs.ECFGNodes `S.union` @args.invocations

{
findNodeOfMethod :: Name' -> ECFG -> Node
findNodeOfMethod name = head . nodes . labfilter ((name ==) . fst) 
}
-}
--------------------------------------------------------------------------------
-- Auxiliary functions
--------------------------------------------------------------------------------

{
ecfgOfCompilationUnit :: CompilationUnit' -> ECFG
ecfgOfCompilationUnit unit
    = ecfg_Syn_CompilationUnit' $ wrap_CompilationUnit' (sem_CompilationUnit' unit) initial
    where
        initial = Inh_CompilationUnit' { label_Inh_CompilationUnit'     = 0
                                       , ecfgLabel_Inh_CompilationUnit' = 0
                                       , ecfg_Inh_CompilationUnit'      = empty }
}