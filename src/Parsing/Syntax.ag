--------------------------------------------------------------------------------
-- Files
--------------------------------------------------------------------------------

data CompilationUnit'
    | CompilationUnit'  package :: {Maybe Name'}
                        imports :: ImportDecls'
                        decls   :: TypeDecls'
deriving CompilationUnit' : Eq, Show

type ImportDecls' = [ImportDecl']

data ImportDecl'
    | ImportDecl'   identifier  :: {Bool}
                    name        :: Name'
                    everything  :: {Bool}
deriving ImportDecl' : Eq, Show

--------------------------------------------------------------------------------
-- Declarations
--------------------------------------------------------------------------------

type TypeDecls' = [TypeDecl']

data TypeDecl'
    | ClassTypeDecl'    decl  :: ClassDecl'
deriving TypeDecl' : Eq, Show

data ClassDecl'
    | ClassDecl'    modifiers :: Modifiers'
                    name      :: {String}
                    body      :: Decls'
deriving ClassDecl' : Eq, Show

type Decls' = [Decl']

data Decl'
    | MemberDecl'   decl    :: MemberDecl'
deriving Decl' : Eq, Show

data MemberDecl'
    | FieldDecl'        modifiers :: Modifiers'
                        ty        :: Type'
                        var       :: VarDecls'

    | MethodDecl'       modifiers :: Modifiers'
                        ty        :: MaybeType'
                        name      :: {String}
                        params    :: FormalParams'
                        body      :: CompoundStmts'

    | ConstructorDecl'  modifiers :: Modifiers'
                        name      :: {String}
                        params    :: FormalParams'
                        body      :: CompoundStmts'
deriving MemberDecl' : Eq, Show

type FormalParams' = [FormalParam']

data FormalParam'
    | FormalParam'  modifiers :: Modifiers'
                    ty        :: Type'
                    id        :: VarDeclId'
deriving FormalParam' : Eq, Show

--------------------------------------------------------------------------------
-- Types
--------------------------------------------------------------------------------

type MaybeType' = maybe Type'

data Type'
    | PrimType'     ty :: PrimType'
    | RefType'      ty :: RefType'
deriving Type' : Ord, Eq, Show

data PrimType'
    | BooleanT'
    | ByteT'
    | ShortT'
    | IntT'
    | LongT'
    | CharT'
    | FloatT'
    | DoubleT'
deriving PrimType' : Ord, Eq, Show

data RefType'
    | ClassRefType' ty :: ClassType'
    | ArrayType'    ty :: Type'
deriving RefType' : Ord, Eq, Show

data ClassType'
    | ClassType' name :: Name'
deriving ClassType' : Ord, Eq, Show

--------------------------------------------------------------------------------
-- Statements
--------------------------------------------------------------------------------

type CompoundStmts' = [CompoundStmt']

data CompoundStmt'
    | Block'        ident   :: {Maybe String}
                    stat    :: CompoundStmts'

    | IfThenElse'   exp     :: Exp'
                    stat1   :: CompoundStmt'
                    stat2   :: CompoundStmt'

    | While'        ident   :: {Maybe String}
                    exp     :: Exp'
                    body    :: CompoundStmt'

    | For'          ident   :: {Maybe String}
                    initial :: MaybeForInit'
                    exp     :: Exp'
                    update  :: MaybeExps'
                    body    :: CompoundStmt'
                    
    | Switch'       exp     :: Exp'
                    cases   :: SwitchBlocks'

    | Try'          stat    :: CompoundStmts'
                    catches :: Catches'
                    finally :: MaybeCompoundStmts'

    | Stmt'         stat    :: Stmt'
deriving CompoundStmt' : Eq, Show

type MaybeCompoundStmts' = maybe CompoundStmts'

data Stmt'
    | Decl'         modifiers   :: Modifiers'
                    ty          :: Type'
                    vars        :: VarDecls'

    | Empty'

    | ExpStmt'      exp         :: Exp'

    | Assert'       exp         :: Exp'
                    message     :: MaybeExp'

    | Assume'       exp         :: Exp'

    | Break'        ident       :: {Maybe String}

    | Continue'     ident       :: {Maybe String}

    | Return'       exp         :: MaybeExp'

    | Throw'        exp         :: Exp'
deriving Stmt' : Eq, Show

type MaybeForInit' = maybe ForInit'

data ForInit'
    | ForLocalVars' modifiers :: Modifiers'
                    ty        :: Type'
                    decls     :: VarDecls'
    | ForInitExps'  exps      :: Exps'
deriving ForInit' : Eq, Show

type SwitchBlocks' = [SwitchBlock']

data SwitchBlock'
    | SwitchBlock' exp  :: MaybeExp'
                   stat :: CompoundStmt'
deriving SwitchBlock' : Eq, Show

type Catches' = [Catch']

data Catch'
    | Catch'    exception :: FormalParam'
                body      :: CompoundStmts'
deriving Catch' : Eq, Show

--------------------------------------------------------------------------------
-- Variables
--------------------------------------------------------------------------------

type VarDecls' = [VarDecl']

data VarDecl'
    | VarDecl'  id   :: VarDeclId'
                init :: VarInit'
deriving VarDecl' : Eq, Show

data VarDeclId'
    | VarId'    id  :: String
deriving VarDeclId' : Eq, Show

type VarInits' = [VarInit']

type MaybeVarInits' = maybe VarInits'

data VarInit'
    | InitExp'   exp    :: Exp'

    | InitArray' inits  :: MaybeVarInits'
deriving VarInit' : Eq, Show

--------------------------------------------------------------------------------
-- Expressions
--------------------------------------------------------------------------------

type MaybeExps' = maybe Exps'

type Exps' = [Exp']

type MaybeExp' = maybe Exp'

data Exp'
    | Lit'              value       :: Literal'

    | This'

    | InstanceCreation' ty          :: ClassType'
                        args        :: Exps'

    | ArrayCreate'      ty          :: Type'
                        sizes       :: Exps'
                        unspecified :: {Int}

    | ArrayCreateInit'  ty          :: Type'
                        dimensions  :: {Int}
                        inits       :: VarInits'

    | FieldAccess'      access      :: FieldAccess'

    | MethodInv'        invocation  :: MethodInvocation'

    | ArrayAccess'      ident       :: {String}
                        indices     :: Exps'

    | ExpName'          name        :: Name'

    | PostIncrement'    exp         :: Exp'

    | PostDecrement'    exp         :: Exp'

    | PreIncrement'     exp         :: Exp'

    | PreDecrement'     exp         :: Exp'

    | PrePlus'          exp         :: Exp'

    | PreMinus'         exp         :: Exp'

    | PreBitCompl'      exp         :: Exp'

    | PreNot'           exp         :: Exp'

    | BinOp'            exp1        :: Exp'
                        op          :: Op'
                        exp2        :: Exp'

    | Cond'             guard       :: Exp'
                        exp1        :: Exp'
                        exp2        :: Exp'

    | Assign'           target      :: Lhs'
                        op          :: AssignOp'
                        exp         :: Exp'
deriving Exp' : Eq, Show

data Literal'
    | Int'      value :: {Integer}
    | Float'    value :: {Float}
    | Double'   value :: {Float}
    | Boolean'  value :: {Bool}
    | Char'     value :: {Char}
    | String'   value :: {String}
    | Null'
deriving Literal' : Eq, Show

data Op'
    | Mult'
    | Div'
    | Rem'
    | Add'
    | Sub'
    | LShift'
    | RShift'
    | RRShift'
    | LThan'
    | GThan'
    | LThanE'
    | GThanE'
    | Equal'
    | NotEq'
    | And'
    | Or'
    | Xor'
    | CAnd'
    | COr'
deriving Op' : Eq, Show

data AssignOp'
    | EqualA'
    | MultA'
    | DivA'
    | RemA'
    | AddA'
    | SubA'
    | LShiftA'
    | RShiftA'
    | RRShiftA'
    | AndA'
    | XorA'
    | OrA'
deriving AssignOp' : Eq, Show

data Lhs'
    | Name'  name   :: Name'
    | Field' access :: FieldAccess'
    | Array' index  :: ArrayIndex'
deriving Lhs' : Eq, Show

data ArrayIndex'
    | ArrayIndex' array   :: Exp'
                  indices :: Exps'
deriving ArrayIndex' : Eq, Show

data FieldAccess'
    | PrimaryFieldAccess'   exp   :: Exp'
                            field :: {String}
                            
    | ClassFieldAccess'     ty    :: Name'
                            field :: {String}
deriving FieldAccess' : Eq, Show

data MethodInvocation'
    | MethodCall'        name :: Name'
                         args :: Exps'

    | PrimaryMethodCall' exp  :: Exp'
                         name :: {String}
                         args :: Exps'
deriving MethodInvocation' : Eq, Show

--------------------------------------------------------------------------------
-- Miscellaneous
--------------------------------------------------------------------------------

type Modifiers' = [Modifier']

data Modifier'
    | Public'
    | Private'
    | Protected'
    | Abstract'
    | Final'
    | Static'
    | StrictFP'
    | Transient'
    | Volatile'
    | Annotation'   annotation :: Annotation'
    | Synchronized'
deriving Modifier' : Eq, Show

type AnnotationKeyValue' = (String, ElementValue')

type AnnotationKeyValues' = [AnnotationKeyValue']

data Annotation'
    | NormalAnnotation'         name   :: Name'
                                values :: AnnotationKeyValues'

    | SingleElementAnnotation'  name  :: Name'
                                value :: ElementValue'

    | MarkerAnnotation'         name  :: Name'
deriving Annotation' : Eq, Show

data ElementValue'
    | ElementValue'      init       :: VarInit'
    | ElementAnnotation' annotation :: Annotation'
deriving ElementValue' : Eq, Show

type Name' = [String]

data Scope 
    | Scope scopePackage :: {Maybe Name'}
            scopeClass   :: {String}
            scopeMember  :: {String}
deriving Scope : Show, Eq, Ord
