--------------------------------------------------------------------------------
-- Types
--------------------------------------------------------------------------------

data Type'
    | PrimType'     ty :: PrimType'
    | RefType'      ty :: RefType'
deriving Type' : Eq, Show

data PrimType'
    | BooleanT'
    | ByteT'
    | ShortT'
    | IntT'
    | LongT'
    | CharT'
    | FloatT'
    | DoubleT'
deriving PrimType' : Eq, Show

data RefType'
    | ArrayType' ty :: Type'
deriving RefType' : Eq, Show

--------------------------------------------------------------------------------
-- Statements
--------------------------------------------------------------------------------

data CompoundStmt'
    | Seq'          stat1   :: CompoundStmt'
                    stat2   :: CompoundStmt'

    | Block'        stat    :: CompoundStmt'

    | IfThenElse'   exp     :: Exp'
                    stat1   :: CompoundStmt'
                    stat2   :: CompoundStmt'

    | While'        ident   :: {Maybe String}
                    exp     :: Exp'
                    body    :: CompoundStmt'
                    
    | Stmt'         stat    :: Stmt'
deriving CompoundStmt' : Eq, Show

data Stmt'
    | Decl'     modifiers   :: {[Modifier']}
                ty          :: Type'
                vars        :: {[VarDecl']}

    | Empty'

    | ExpStmt'      exp         :: Exp'

    | Assert'       exp         :: Exp'
                    error       :: {Maybe Exp'}

    | Assume'       exp         :: Exp'

    | Break'        ident       :: {Maybe String}

    | Continue'     ident       :: {Maybe String}

    | Return'       exp         :: {Maybe Exp'}
deriving Stmt' : Eq, Show

--------------------------------------------------------------------------------
-- Variables
--------------------------------------------------------------------------------

data VarDecl'
    | VarDecl'  id   :: VarDeclId'
                init :: VarInit'
deriving VarDecl' : Eq, Show

data VarDeclId'
    | VarId'    id  :: String
deriving VarDeclId' : Eq, Show

data VarInit'
    | InitExp'   exp    :: Exp'

    | InitArray' inits  :: {Maybe [VarInit']}
deriving VarInit' : Eq, Show

--------------------------------------------------------------------------------
-- Expressions
--------------------------------------------------------------------------------

data Exp'
    | Lit'              value       :: Literal'

    | ArrayCreate'      ty          :: Type'
                        sizes       :: {[Exp']}
                        unspecified :: {Int}

    | MethodInv'        invocation  :: MethodInvocation'

    | ArrayAccess'      ident       :: {String}
                        index       :: {[Exp']}

    | ExpName'          name        :: Name'

    | PostIncrement'    exp         :: Exp'

    | PostDecrement'    exp         :: Exp'

    | PreIncrement'     exp         :: Exp'

    | PreDecrement'     exp         :: Exp'

    | PrePlus'          exp         :: Exp'

    | PreMinus'         exp         :: Exp'

    | PreBitCompl'      exp         :: Exp'

    | PreNot'           exp         :: Exp'

    | BinOp'            exp1        :: Exp'
                        op          :: Op'
                        exp2        :: Exp'

    | Cond'             guard       :: Exp'
                        e1          :: Exp'
                        e2          :: Exp'

    | Assign'           target      :: Lhs'
                        op          :: AssignOp'
                        exp         :: Exp'
deriving Exp' : Eq, Show

data Literal'
    | Int'      value :: {Integer}
    | Float'    value :: {Float}
    | Double'   value :: {Float}
    | Boolean'  value :: {Bool}
    | Char'     value :: {Char}
    | String'   value :: {String}
    | Null'
deriving Literal' : Eq, Show

data Op'
    | Mult'
    | Div'
    | Rem'
    | Add'
    | Sub'
    | LShift'
    | RShift'
    | RRShift'
    | LThan'
    | GThan'
    | LThanE'
    | GThanE'
    | Equal'
    | NotEq'
    | And'
    | Or'
    | Xor'
    | CAnd'
    | COr'
deriving Op' : Eq, Show

data AssignOp'
    | EqualA'
    | MultA'
    | DivA'
    | RemA'
    | AddA'
    | SubA'
    | LShiftA'
    | RShiftA'
    | RRShiftA'
    | AndA'
    | XorA'
    | OrA'
deriving AssignOp' : Eq, Show

data Lhs'
    | Name'  name :: Name'
deriving Lhs' : Eq, Show

data MethodInvocation'
    | MethodCall'   name :: Name'
                    args :: {[Exp']}
deriving MethodInvocation' : Eq, Show

--------------------------------------------------------------------------------
-- Miscellaneous
--------------------------------------------------------------------------------

data Modifier'
    | Static'
deriving Modifier' : Eq, Show

type Name' = [String]
